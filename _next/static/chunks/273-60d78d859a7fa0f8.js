"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[273],{6041:(e,t,a)=>{a.d(t,{e:()=>n});var n=function(e){return e.TODO="todo",e.IN_PROGRESS="in_progress",e.COMPLETED="completed",e}({})},6274:(e,t,a)=>{a.d(t,{G9:()=>r,I1:()=>l,J9:()=>o,kR:()=>c,qL:()=>i});var n=a(6041);function o(e,t){if(0===e.length)return"";if(1===e.length)return e[0].id;let a=e.map(e=>({userId:e.id,yesterdayMinutes:function(e,t){let a=new Date;a.setDate(a.getDate()-1);let n=a.toISOString().split("T")[0],o=t.find(t=>t.userId===e&&t.date===n);return(null==o?void 0:o.minutesWorked)||0}(e.id,t)})),n=Math.min(...a.map(e=>e.yesterdayMinutes)),o=a.filter(e=>e.yesterdayMinutes===n),s=Math.floor(Math.random()*o.length);return o[s].userId}function s(e){if(!e.startedAt||!e.completedAt)return 0;let t=new Date(e.startedAt).getTime();return Math.round((new Date(e.completedAt).getTime()-t)/6e4)}function r(e,t){let a=s(t);return{...e,totalCompletedTasks:e.totalCompletedTasks+1,totalMinutesWorked:e.totalMinutesWorked+a,lastActiveDate:new Date}}function i(e,t){let a=new Date().toISOString().split("T")[0],o=t.filter(t=>t.assignedTo===e&&t.status===n.e.COMPLETED&&t.completedAt&&new Date(t.completedAt).toISOString().split("T")[0]===a),r=o.reduce((e,t)=>e+s(t),0);return{date:a,userId:e,tasksCompleted:o.length,minutesWorked:r,tasks:o}}function l(e){let t=new Date,[a,n]=e.split(":").map(Number),o=new Date;return o.setHours(a,n,0,0),t>o}function c(e,t){let a=new Date,n=new Date(a);n.setDate(a.getDate()-a.getDay());let o=new Date(n);o.setDate(n.getDate()+6);let s=n.toISOString().split("T")[0],r=o.toISOString().split("T")[0],i={};return e.forEach(e=>{let a=t.filter(t=>t.userId===e.id&&t.date>=s&&t.date<=r);i[e.id]={tasksCompleted:a.reduce((e,t)=>e+t.tasksCompleted,0),minutesWorked:a.reduce((e,t)=>e+t.minutesWorked,0),dailyBreakdown:a}}),{weekStart:s,weekEnd:r,userStats:i}}},7273:(e,t,a)=>{a.d(t,{AppProvider:()=>m,n:()=>u});var n=a(5155),o=a(2115),s=a(6041),r=a(9621);function i(e){let t=r.d.getInstance(),a=e||t.getCurrentRoomId();return a?"room:".concat(a,":data"):"family-helper-data"}function l(e){try{let t=i();localStorage.setItem(t,JSON.stringify(e)),r.d.getInstance().broadcastDataChange()}catch(e){console.error("Error saving to local storage:",e)}}var c=a(6274);let d={data:null,isLoading:!0,error:null,roomId:null,isInRoom:!1};function h(e,t){switch(t.type){case"LOAD_DATA":return{...e,data:t.payload,isLoading:!1,error:null};case"ADD_TASK":{if(!e.data)return e;let a=[...e.data.tasks,t.payload],n={...e.data,tasks:a,lastSyncDate:new Date};return l(n),{...e,data:n}}case"UPDATE_TASK":{if(!e.data)return e;let a=e.data.tasks.map(e=>e.id===t.payload.id?{...e,...t.payload.updates}:e),n={...e.data,tasks:a,lastSyncDate:new Date};return l(n),{...e,data:n}}case"DELETE_TASK":{if(!e.data)return e;let a=e.data.tasks.filter(e=>e.id!==t.payload),n={...e.data,tasks:a,lastSyncDate:new Date};return l(n),{...e,data:n}}case"MOVE_TASK":{if(!e.data)return e;let a=e.data.tasks.find(e=>e.id===t.payload.id);if(!a)return e;let n={status:t.payload.status};t.payload.status===s.e.IN_PROGRESS?n.startedAt=new Date:t.payload.status===s.e.COMPLETED&&(n.completedAt=new Date,a.startedAt&&(n.actualMinutes=Math.round((new Date().getTime()-new Date(a.startedAt).getTime())/6e4)));let o=e.data.tasks.map(e=>e.id===t.payload.id?{...e,...n}:e),r=e.data.family,i=e.data.dailyStats;if(t.payload.status===s.e.COMPLETED&&a.assignedTo){let t={...a,...n};r={...e.data.family,members:e.data.family.members.map(e=>e.id===a.assignedTo?(0,c.G9)(e,t):e)};let s=(0,c.qL)(a.assignedTo,o),l=i.findIndex(e=>e.date===s.date&&e.userId===s.userId);l>=0?(i=[...i])[l]=s:i=[...i,s]}let d={...e.data,tasks:o,family:r,dailyStats:i,lastSyncDate:new Date};return l(d),{...e,data:d}}case"UPDATE_FAMILY":{if(!e.data)return e;let a={...e.data.family,...t.payload},n={...e.data,family:a,lastSyncDate:new Date};return l(n),{...e,data:n}}case"ADD_URGENT_REQUEST":{if(!e.data)return e;let a={...e.data,urgentRequests:[...e.data.urgentRequests,t.payload],lastSyncDate:new Date};return l(a),{...e,data:a}}case"UPDATE_URGENT_REQUEST":{if(!e.data)return e;let a=e.data.urgentRequests.map(e=>e.id===t.payload.id?{...e,status:t.payload.status}:e),n={...e.data,urgentRequests:a,lastSyncDate:new Date};return l(n),{...e,data:n}}case"SET_ROOM":return{...e,roomId:t.payload.roomId,isInRoom:t.payload.isInRoom};case"LEAVE_ROOM":return{...e,roomId:null,isInRoom:!1};default:return e}}let g=(0,o.createContext)(null);function m(e){let{children:t}=e,[a,s]=(0,o.useReducer)(h,d);(0,o.useEffect)(()=>{let e=r.d.getInstance(),t=e.getCurrentRoomId();t&&s({type:"SET_ROOM",payload:{roomId:t,isInRoom:!0}});let a=()=>{let e=function(){try{let e=i(),t=localStorage.getItem(e);if(!t)return null;let a=JSON.parse(t);return{...a,family:{...a.family,createdAt:new Date(a.family.createdAt),members:a.family.members.map(e=>({...e,lastActiveDate:new Date(e.lastActiveDate)}))},tasks:a.tasks.map(e=>({...e,createdAt:new Date(e.createdAt),startedAt:e.startedAt?new Date(e.startedAt):void 0,completedAt:e.completedAt?new Date(e.completedAt):void 0})),dailyStats:a.dailyStats.map(e=>({...e,tasks:e.tasks.map(e=>({...e,createdAt:new Date(e.createdAt),startedAt:e.startedAt?new Date(e.startedAt):void 0,completedAt:e.completedAt?new Date(e.completedAt):void 0}))})),urgentRequests:a.urgentRequests.map(e=>({...e,createdAt:new Date(e.createdAt)})),lastSyncDate:new Date(a.lastSyncDate)}}catch(e){return console.error("Error parsing local storage data:",e),null}}();e||(e=function(){let e={family:{id:"family-1",name:"胖虎之家",members:[{id:"user-1",name:"小吕",totalCompletedTasks:0,totalMinutesWorked:0,lastActiveDate:new Date},{id:"user-2",name:"小王",totalCompletedTasks:0,totalMinutesWorked:0,lastActiveDate:new Date}],workEndTime:"20:30",monthlyFund:0,createdAt:new Date},tasks:[],dailyStats:[],urgentRequests:[],lastSyncDate:new Date};return l(e),e}()),s({type:"LOAD_DATA",payload:e})};return e.onDataChange(()=>{a()}),a(),()=>{e.cleanup()}},[]);let m={addTask:e=>{s({type:"ADD_TASK",payload:{...e,id:"task-".concat(Date.now(),"-").concat(Math.random().toString(36).substr(2,9)),createdAt:new Date}})},updateTask:(e,t)=>{s({type:"UPDATE_TASK",payload:{id:e,updates:t}})},deleteTask:e=>{s({type:"DELETE_TASK",payload:e})},moveTask:(e,t)=>{s({type:"MOVE_TASK",payload:{id:e,status:t}})},updateFamily:e=>{s({type:"UPDATE_FAMILY",payload:e})},addUrgentRequest:e=>{s({type:"ADD_URGENT_REQUEST",payload:{...e,id:"urgent-".concat(Date.now(),"-").concat(Math.random().toString(36).substr(2,9)),createdAt:new Date}})},updateUrgentRequest:(e,t)=>{s({type:"UPDATE_URGENT_REQUEST",payload:{id:e,status:t}})},assignTaskAutomatically:e=>{if(!a.data)return;let t=(0,c.J9)(a.data.family.members,a.data.dailyStats);m.addTask({...e,assignedTo:t})}};return(0,n.jsx)(g.Provider,{value:{state:a,dispatch:s,actions:m},children:t})}function u(){let e=(0,o.useContext)(g);if(!e)throw Error("useApp must be used within an AppProvider");return e}},9621:(e,t,a)=>{a.d(t,{d:()=>o});class n{static getInstance(){return n.instance||(n.instance=new n),n.instance}async initialize(e){this.config=e,this.roomId=e.roomId,this.deviceId=e.deviceId;let t=localStorage.getItem("room:".concat(this.roomId,":host"));this.isHost=t===this.deviceId,this.startSignalingPolling(),this.isHost?(console.log("[WebRTC] 初始化为房间主机"),await this.initializeAsHost()):(console.log("[WebRTC] 初始化为客户端"),await this.initializeAsClient())}async initializeAsHost(){localStorage.setItem("room:".concat(this.roomId,":host"),this.deviceId),this.startListeningForConnections()}async initializeAsClient(){await this.connectToHost()}startListeningForConnections(){let e=setInterval(()=>{let e="room:".concat(this.roomId,":connections"),t=localStorage.getItem(e);if(t)try{let e=JSON.parse(t);for(let[t]of Object.entries(e))t===this.deviceId||this.peers.has(t)||this.handleConnectionRequest(t)}catch(e){console.error("[WebRTC] 解析连接数据失败:",e)}},1e3);window.addEventListener("beforeunload",()=>{clearInterval(e)})}async connectToHost(){await new Promise(e=>setTimeout(e,1e3));let e=localStorage.getItem("room:".concat(this.roomId,":host"));if(!e)return void console.error("[WebRTC] 未找到房间主机");if(e===this.deviceId){console.log("[WebRTC] 当前设备就是主机，切换为主机模式"),this.isHost=!0,await this.initializeAsHost();return}this.sendSignalingMessage(e,{type:"connection-request"}),console.log("[WebRTC] 已发送连接请求给主机:",e)}startListeningForOffer(){let e=setInterval(async()=>{let t="room:".concat(this.roomId,":offer:").concat(this.deviceId),a=localStorage.getItem(t);if(a)try{let{offer:n,hostId:o}=JSON.parse(a);console.log("[WebRTC] 收到主机offer"),localStorage.removeItem(t),clearInterval(e),await this.handleOffer(o,n)}catch(e){console.error("[WebRTC] 处理offer失败:",e)}},1e3);setTimeout(()=>{clearInterval(e)},3e4)}startListeningForIceCandidates(e){let t=setInterval(()=>{let t="room:".concat(this.roomId,":ice:").concat(e,":").concat(this.deviceId),a=localStorage.getItem(t);if(a)try{let{candidate:n}=JSON.parse(a),o=this.peers.get(e);o&&n&&(o.addIceCandidate(new RTCIceCandidate(n)),localStorage.removeItem(t))}catch(e){console.error("[WebRTC] 处理ICE候选失败:",e)}},1e3);window.addEventListener("beforeunload",()=>{clearInterval(t)})}startListeningForAnswer(e){let t=setInterval(async()=>{let a="room:".concat(this.roomId,":answer:").concat(e),n=localStorage.getItem(a);if(n)try{let{answer:o}=JSON.parse(n);console.log("[WebRTC] 收到客户端answer"),localStorage.removeItem(a),clearInterval(t);let s=this.peers.get(e);s&&(await s.setRemoteDescription(o),this.startListeningForIceCandidates(e))}catch(e){console.error("[WebRTC] 处理answer失败:",e)}},1e3);setTimeout(()=>{clearInterval(t)},3e4)}async createPeerConnection(e){let t=new RTCPeerConnection({iceServers:[]});return this.peers.set(e,t),t.onicecandidate=t=>{t.candidate&&this.sendIceCandidate(e,t.candidate)},t.onconnectionstatechange=()=>{var a,n;console.log("[WebRTC] 连接状态:",t.connectionState),"connected"===t.connectionState?null==(a=this.config)||a.onPeerConnected(e):("disconnected"===t.connectionState||"failed"===t.connectionState)&&(null==(n=this.config)||n.onPeerDisconnected(e),this.cleanupPeer(e))},t.ondatachannel=t=>{let a=t.channel;this.setupDataChannel(a,e),this.dataChannels.set(e,a)},t}setupPeerConnection(e,t){e.onicecandidate=e=>{e.candidate&&this.sendSignalingMessage(t,{type:"ice-candidate",candidate:e.candidate})},e.onconnectionstatechange=()=>{var a,n,o,s;console.log("[WebRTC] 连接状态:",e.connectionState,"with",t),"connected"===e.connectionState?null==(n=this.config)||null==(a=n.onPeerConnected)||a.call(n,t):("disconnected"===e.connectionState||"failed"===e.connectionState)&&(null==(s=this.config)||null==(o=s.onPeerDisconnected)||o.call(s,t),this.cleanupPeer(t))}}setupDataChannel(e,t){e.onopen=()=>{console.log("[WebRTC] 数据通道已打开:",t)},e.onmessage=e=>{try{let a=JSON.parse(e.data);this.handlePeerMessage(a,t)}catch(e){console.error("[WebRTC] 解析消息失败:",e)}},e.onerror=e=>{console.error("[WebRTC] 数据通道错误:",e)},e.onclose=()=>{console.log("[WebRTC] 数据通道已关闭:",t)}}handlePeerMessage(e,t){switch(e.type){case"data-sync":var a;null==(a=this.config)||a.onDataReceived(e.data,t);break;case"ping":this.sendToPeer(t,{type:"pong",timestamp:Date.now()});break;case"pong":break;default:console.log("[WebRTC] 未知消息类型:",e.type)}}sendIceCandidate(e,t){let a="room:".concat(this.roomId,":ice:").concat(this.deviceId,":").concat(e),n={candidate:t,timestamp:Date.now()};localStorage.setItem(a,JSON.stringify(n))}sendToPeer(e,t){let a=this.dataChannels.get(e);if(a&&"open"===a.readyState){let e={...t,senderId:this.deviceId};a.send(JSON.stringify(e))}}broadcast(e){for(let[t]of this.dataChannels)this.sendToPeer(t,e)}syncData(e){this.broadcast({type:"data-sync",data:e,timestamp:Date.now()})}cleanupPeer(e){let t=this.peers.get(e);t&&(t.close(),this.peers.delete(e));let a=this.dataChannels.get(e);a&&(a.close(),this.dataChannels.delete(e))}getConnectedPeers(){return Array.from(this.dataChannels.keys()).filter(e=>{var t;return(null==(t=this.dataChannels.get(e))?void 0:t.readyState)==="open"})}disconnect(){for(let[e]of this.peers)this.cleanupPeer(e);this.isHost&&(localStorage.removeItem("room:".concat(this.roomId,":host")),localStorage.removeItem("room:".concat(this.roomId,":connections"))),this.signalingInterval&&(clearInterval(this.signalingInterval),this.signalingInterval=null)}startSignalingPolling(){this.signalingInterval=setInterval(()=>{this.checkSignalingMessages()},1e3)}checkSignalingMessages(){let e=Date.now(),t="room:".concat(this.roomId,":connections"),a=localStorage.getItem(t);if(a)try{let e=JSON.parse(a);for(let[t,a]of Object.entries(e))t!==this.deviceId&&(a.targetDevice===this.deviceId||"all"===a.targetDevice)&&a.timestamp>this.lastSignalingCheck&&this.handleSignalingMessage(t,a)}catch(e){console.error("[WebRTC] 解析连接信息失败:",e)}this.lastSignalingCheck=e}async handleSignalingMessage(e,t){switch(console.log("[WebRTC] 收到信令消息:",t.type,"from",e),t.type){case"offer":await this.handleOffer(e,t.offer);break;case"answer":await this.handleAnswer(e,t.answer);break;case"ice-candidate":await this.handleIceCandidate(e,t.candidate);break;case"connection-request":this.isHost&&await this.handleConnectionRequest(e)}}sendSignalingMessage(e,t){let a="room:".concat(this.roomId,":connections"),n=localStorage.getItem(a),o={};if(n)try{o=JSON.parse(n)}catch(e){console.error("[WebRTC] 解析连接信息失败:",e)}o[this.deviceId]={...t,timestamp:Date.now(),targetDevice:e},localStorage.setItem(a,JSON.stringify(o))}async handleConnectionRequest(e){console.log("[WebRTC] 处理连接请求 from",e);let t=new RTCPeerConnection({iceServers:[]}),a=t.createDataChannel("data",{ordered:!0});this.setupDataChannel(a,e),this.setupPeerConnection(t,e),this.peers.set(e,t),this.dataChannels.set(e,a);let n=await t.createOffer();await t.setLocalDescription(n),this.sendSignalingMessage(e,{type:"offer",offer:n})}async handleOffer(e,t){console.log("[WebRTC] 处理offer from",e);let a=new RTCPeerConnection({iceServers:[]});this.setupPeerConnection(a,e),a.ondatachannel=t=>{let a=t.channel;this.setupDataChannel(a,e),this.dataChannels.set(e,a)},this.peers.set(e,a),await a.setRemoteDescription(t);let n=await a.createAnswer();await a.setLocalDescription(n),this.sendSignalingMessage(e,{type:"answer",answer:n})}async handleAnswer(e,t){console.log("[WebRTC] 处理answer from",e);let a=this.peers.get(e);a&&await a.setRemoteDescription(t)}async handleIceCandidate(e,t){console.log("[WebRTC] 处理ICE candidate from",e);let a=this.peers.get(e);a&&await a.addIceCandidate(t)}constructor(){this.config=null,this.peers=new Map,this.dataChannels=new Map,this.isHost=!1,this.deviceId="",this.roomId="",this.connectionOffers=new Map,this.signalingInterval=null,this.lastSignalingCheck=0}}n.instance=null;class o{static getInstance(){return o.instance||(o.instance=new o),o.instance}createRoom(e){let t=this.generateRoomId(),a={id:t,name:e,createdAt:new Date().toISOString(),lastActive:new Date().toISOString(),memberCount:1};return localStorage.setItem("room:".concat(t,":info"),JSON.stringify(a)),localStorage.setItem("room:".concat(t,":host"),this.getUserId()),this.updateURL(t),this.initializeRoom(t),t}joinRoom(e){let t=this.getRoomInfo(e);return!!t&&(t.lastActive=new Date().toISOString(),localStorage.setItem("room:".concat(e,":info"),JSON.stringify(t)),this.updateURL(e),this.initializeRoom(e),!0)}getRoomInfo(e){let t=localStorage.getItem("room:".concat(e,":info"));return t?JSON.parse(t):null}getCurrentRoomId(){return this.currentRoomId}getRoomShareLink(e){let t=e||this.currentRoomId;if(!t)return window.location.origin;let a=new URL(window.location.origin);return a.searchParams.set("room",t),a.toString()}async initializeRoom(e){this.currentRoomId=e,this.broadcastChannel&&this.broadcastChannel.close(),this.broadcastChannel=new BroadcastChannel("room:".concat(e)),this.broadcastChannel.onmessage=e=>{"data-sync"===e.data.type&&this.onDataChangeCallback&&this.onDataChangeCallback()},await this.initializeWebRTC(e),this.syncInterval&&clearInterval(this.syncInterval),this.syncInterval=setInterval(()=>{this.updateLastSeen()},3e4)}async initializeWebRTC(e){try{this.webrtcManager=n.getInstance(),await this.webrtcManager.initialize({roomId:e,deviceId:this.getUserId(),onDataReceived:(e,t)=>{console.log("[Room] 收到来自",t,"的数据同步"),this.onDataChangeCallback&&this.onDataChangeCallback()},onPeerConnected:e=>{console.log("[Room] 设备连接:",e),this.connectedPeers.add(e),this.updateConnectedPeersStatus()},onPeerDisconnected:e=>{console.log("[Room] 设备断开:",e),this.connectedPeers.delete(e),this.updateConnectedPeersStatus()}}),console.log("[Room] WebRTC初始化完成")}catch(e){console.error("[Room] WebRTC初始化失败:",e)}}updateConnectedPeersStatus(){if(this.currentRoomId){let e=this.getRoomInfo(this.currentRoomId);e&&(e.memberCount=this.connectedPeers.size+1,e.lastActive=new Date().toISOString(),localStorage.setItem("room:".concat(this.currentRoomId,":info"),JSON.stringify(e)))}}broadcastDataChange(){if(this.broadcastChannel&&this.currentRoomId&&this.broadcastChannel.postMessage({type:"data-sync",roomId:this.currentRoomId,timestamp:Date.now()}),this.webrtcManager){let e=this.getRoomData();this.webrtcManager.syncData(e)}}getRoomData(){if(!this.currentRoomId)return null;let e="room:".concat(this.currentRoomId,":data"),t=localStorage.getItem(e);return t?JSON.parse(t):null}onDataChange(e){this.onDataChangeCallback=e}updateLastSeen(){if(!this.currentRoomId)return;let e="room:".concat(this.currentRoomId,":member:").concat(this.getUserId()),t=this.getCurrentMember();t&&(t.lastSeen=new Date().toISOString(),t.isOnline=!0,localStorage.setItem(e,JSON.stringify(t)))}getCurrentMember(){if(!this.currentRoomId)return null;let e="room:".concat(this.currentRoomId,":member:").concat(this.getUserId()),t=localStorage.getItem(e);return t?JSON.parse(t):null}addMemberToRoom(e){if(!this.currentRoomId)throw Error("No active room");let t={id:this.getUserId(),name:e,joinedAt:new Date().toISOString(),lastSeen:new Date().toISOString(),isOnline:!0},a="room:".concat(this.currentRoomId,":member:").concat(t.id);return localStorage.setItem(a,JSON.stringify(t)),t}getRoomMembers(){if(!this.currentRoomId)return[];let e=[],t="room:".concat(this.currentRoomId,":member:");for(let a=0;a<localStorage.length;a++){let n=localStorage.key(a);if(n&&n.startsWith(t)){let t=localStorage.getItem(n);if(t){let a=JSON.parse(t),n=new Date(a.lastSeen);a.isOnline=new Date().getTime()-n.getTime()<3e5,e.push(a)}}}return e.sort((e,t)=>new Date(e.joinedAt).getTime()-new Date(t.joinedAt).getTime())}generateRoomId(){return Math.random().toString(36).substring(2,10).toUpperCase()}getUserId(){let e=localStorage.getItem("user:id");return e||(e="user_"+Math.random().toString(36).substring(2,15),localStorage.setItem("user:id",e)),e}updateURL(e){{let t=new URL(window.location.href);t.searchParams.set("room",e),window.history.replaceState({},"",t.toString())}}getConnectedDevices(){return this.webrtcManager?this.webrtcManager.getConnectedPeers():[]}getConnectionStatus(){return{localSync:null!==this.broadcastChannel,webrtcSync:null!==this.webrtcManager,connectedDevices:this.connectedPeers.size}}cleanup(){this.broadcastChannel&&(this.broadcastChannel.close(),this.broadcastChannel=null),this.syncInterval&&(clearInterval(this.syncInterval),this.syncInterval=null),this.webrtcManager&&(this.webrtcManager.disconnect(),this.webrtcManager=null),this.connectedPeers.clear()}constructor(){this.currentRoomId=null,this.broadcastChannel=null,this.syncInterval=null,this.onDataChangeCallback=null,this.webrtcManager=null,this.connectedPeers=new Set;{let e=new URLSearchParams(window.location.search);this.currentRoomId=e.get("room"),this.currentRoomId&&this.initializeRoom(this.currentRoomId)}}}}}]);